{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Swal from 'sweetalert2'; // Import SweetAlert\nimport axios from 'axios'; // Import Axios for making HTTP requests\nimport formValidation from \"@/mixins/commen/formValidation\"; // Import your form validation mixin\n\nexport default {\n  mixins: [formValidation],\n  data() {\n    return {\n      username: '',\n      // Initialize username data property\n      password: '' // Initialize password data property\n    };\n  },\n  methods: {\n    login() {\n      axios.post('http://127.0.0.1:8000/api/auth/login', {\n        // Make the API call to login\n        username: this.username,\n        password: this.password\n      }).then(response => {\n        if (response.data.success) {\n          // Check if login was successful\n          Swal.fire({\n            // Show success message using SweetAlert\n            icon: 'success',\n            title: 'Login Successful',\n            text: 'Redirecting...',\n            timer: 2000,\n            // Automatically close the alert after 2 seconds\n            showConfirmButton: false\n          });\n\n          // Redirect user based on role\n          if (response.data.user.role === 'admin') {\n            this.$router.push('/admin/dashboard'); // Redirect to admin dashboard\n          } else if (response.data.user.role === 'user') {\n            this.$router.push('/user-dashboard'); // Redirect to user dashboard\n          }\n        } else {\n          // Show error message if login failed\n          Swal.fire({\n            icon: 'error',\n            title: 'Login Failed',\n            text: response.data.message\n          });\n        }\n      }).catch(error => {\n        // Handle error\n        console.error('Error:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["Swal","axios","formValidation","mixins","data","username","password","methods","login","post","then","response","success","fire","icon","title","text","timer","showConfirmButton","user","role","$router","push","message","catch","error","console"],"sources":["C:\\Users\\chukwuebuka.ohaji\\Workspace\\Tests\\HomeCareAgency\\web\\src\\pages\\auth\\login.vue"],"sourcesContent":["<template>\r\n    <div>\r\n\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row \">\r\n                <div class=\"col-12 p-0\">\r\n                    <div class=\"login-card\">\r\n                        <div>\r\n                            <div>\r\n                                <a class=\"logo\">\r\n                                    <img class=\"img-fluid for-light\" src=\"../../assets/images/logo/logo.png\"\r\n                                        alt=\"looginpage\" />\r\n                                    <img class=\"img-fluid for-dark\" src=\"../../assets/images/logo/logo_dark.png\"\r\n                                        alt=\"looginpage\" />\r\n                                </a>\r\n                            </div>\r\n                            <div class=\"login-main\">\r\n                                <form class=\"theme-form needs-validation\" novalidate=\"\"\r\n                                    @submit.prevent=\"onCustomStyleSubmit\">\r\n                                    <h4>Sign in to account</h4>\r\n                                    <p>Enter your username & password to login</p>\r\n                                    <div class=\"form-group mb-3\">\r\n                                        <label class=\"col-form-label\">Username</label>\r\n                                        <input class=\"form-control\" type=\"text\" required=\"\"\r\n                                            placeholder=\"Enter your username\" v-model=\"username\"\r\n                                            v-bind:class=\"formSubmitted ? userError ? 'is-invalid' : 'is-valid' : ''\">\r\n                                        <div class=\"valid-feedback\" id=\"feedback-1\" v-if=\"errors[0]\">{{\r\n                                            errors[0].msgUsername }}</div>\r\n\r\n                                    </div>\r\n\r\n                                    <div class=\"form-group mb-3\">\r\n                                        <label class=\"col-form-label\">Password</label>\r\n                                        <div class=\"form-input position-relative\">\r\n                                            <input class=\"form-control\" type=\"password\" required=\"\"\r\n                                                placeholder=\"Enter your password\" v-model=\"password\"\r\n                                                v-bind:class=\"formSubmitted ? passwordError ? 'is-invalid' : 'is-valid' : ''\">\r\n                                            <div class=\"show-hide\"><span class=\"show\"> </span></div>\r\n                                            <div class=\"valid-feedback\" id=\"feedback-1\" v-if=\"errors[0]\">{{\r\n                                                errors[0].message }}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"form-group mb-0\">\r\n                                        <div class=\"checkbox p-0\">\r\n                                            <input id=\"checkbox1\" type=\"checkbox\">\r\n                                            <label class=\"text-muted\" for=\"checkbox1\">Remember password</label>\r\n                                        </div>\r\n\r\n                                        <div class=\"text-end mt-3\">\r\n                                            <!-- <button class=\"btn btn-primary btn-block w-100\" type=\"submit\"\r\n                                                @click.prevent=\"login\">Sign\r\n                                                in</button> -->\r\n                                            <button class=\"btn btn-primary btn-block w-100\">Sign in</button>\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                    <p class=\"mt-4 mb-0 text-center\">Don't have account?<a class=\"ms-2\"\r\n                                            href=\"sign-up.html\">Create\r\n                                            Account</a></p>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport Swal from 'sweetalert2'; // Import SweetAlert\r\nimport axios from 'axios'; // Import Axios for making HTTP requests\r\nimport formValidation from \"@/mixins/commen/formValidation\"; // Import your form validation mixin\r\n\r\nexport default {\r\n    mixins: [formValidation],\r\n    data() {\r\n        return {\r\n            username: '', // Initialize username data property\r\n            password: '', // Initialize password data property\r\n        };\r\n    },\r\n    methods: {\r\n        login() {\r\n            axios.post('http://127.0.0.1:8000/api/auth/login', { // Make the API call to login\r\n                username: this.username,\r\n                password: this.password\r\n            })\r\n                .then(response => {\r\n                    if (response.data.success) { // Check if login was successful\r\n                        Swal.fire({ // Show success message using SweetAlert\r\n                            icon: 'success',\r\n                            title: 'Login Successful',\r\n                            text: 'Redirecting...',\r\n                            timer: 2000, // Automatically close the alert after 2 seconds\r\n                            showConfirmButton: false\r\n                        });\r\n\r\n                        // Redirect user based on role\r\n                        if (response.data.user.role === 'admin') {\r\n                            this.$router.push('/admin/dashboard'); // Redirect to admin dashboard\r\n                        } else if (response.data.user.role === 'user') {\r\n                            this.$router.push('/user-dashboard'); // Redirect to user dashboard\r\n                        }\r\n                    } else {\r\n                        // Show error message if login failed\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Login Failed',\r\n                            text: response.data.message\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    // Handle error\r\n                    console.error('Error:', error);\r\n                });\r\n        }\r\n    }\r\n}\r\n</script>\r\n"],"mappings":";AAuEA,OAAOA,IAAG,MAAO,aAAa,EAAE;AAChC,OAAOC,KAAI,MAAO,OAAO,EAAE;AAC3B,OAAOC,cAAa,MAAO,gCAAgC,EAAE;;AAE7D,eAAe;EACXC,MAAM,EAAE,CAACD,cAAc,CAAC;EACxBE,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,QAAQ,EAAE,EAAE;MAAE;MACdC,QAAQ,EAAE,EAAE,CAAE;IAClB,CAAC;EACL,CAAC;EACDC,OAAO,EAAE;IACLC,KAAKA,CAAA,EAAG;MACJP,KAAK,CAACQ,IAAI,CAAC,sCAAsC,EAAE;QAAE;QACjDJ,QAAQ,EAAE,IAAI,CAACA,QAAQ;QACvBC,QAAQ,EAAE,IAAI,CAACA;MACnB,CAAC,EACII,IAAI,CAACC,QAAO,IAAK;QACd,IAAIA,QAAQ,CAACP,IAAI,CAACQ,OAAO,EAAE;UAAE;UACzBZ,IAAI,CAACa,IAAI,CAAC;YAAE;YACRC,IAAI,EAAE,SAAS;YACfC,KAAK,EAAE,kBAAkB;YACzBC,IAAI,EAAE,gBAAgB;YACtBC,KAAK,EAAE,IAAI;YAAE;YACbC,iBAAiB,EAAE;UACvB,CAAC,CAAC;;UAEF;UACA,IAAIP,QAAQ,CAACP,IAAI,CAACe,IAAI,CAACC,IAAG,KAAM,OAAO,EAAE;YACrC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,kBAAkB,CAAC,EAAE;UAC3C,OAAO,IAAIX,QAAQ,CAACP,IAAI,CAACe,IAAI,CAACC,IAAG,KAAM,MAAM,EAAE;YAC3C,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC,EAAE;UAC1C;QACJ,OAAO;UACH;UACAtB,IAAI,CAACa,IAAI,CAAC;YACNC,IAAI,EAAE,OAAO;YACbC,KAAK,EAAE,cAAc;YACrBC,IAAI,EAAEL,QAAQ,CAACP,IAAI,CAACmB;UACxB,CAAC,CAAC;QACN;MACJ,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;QACZ;QACAC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAClC,CAAC,CAAC;IACV;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}