{"ast":null,"code":"import axios from 'axios';\nimport Swal from 'sweetalert2';\nexport default {\n  data() {\n    return {\n      elementsPerPage: 10,\n      currentPage: 1,\n      perPage: 10,\n      pageOptions: [10, 25, 50, 100],\n      active: true,\n      editName: '',\n      name: '',\n      loading: false,\n      item: {},\n      status: '',\n      types: [],\n      priorities: [],\n      type: '',\n      priority: '',\n      desc: ''\n    };\n  },\n  computed: {\n    columns() {\n      return ['Name', 'Status', 'Date Created'];\n    },\n    isFormValid() {\n      return this.type;\n    }\n  },\n  methods: {\n    async fetchTypes() {\n      try {\n        const response = await axios.get('http://127.0.0.1:8000/api/types/list', {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + localStorage.getItem('HCA_TOKEN')\n          }\n        });\n        if (response.data.status) {\n          this.types = response.data.data;\n        } else {\n          console.error('Error fetching types:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching types:', error);\n      }\n    },\n    // \n    async fetchPriorities() {\n      try {\n        const response = await axios.get('http://127.0.0.1:8000/api/priorities/list', {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': 'Bearer ' + localStorage.getItem('HCA_TOKEN')\n          }\n        });\n        if (response.data.status) {\n          this.priorities = response.data.data;\n        } else {\n          console.error('Error fetching priorities:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching priorities:', error);\n      }\n    },\n    // \n    async createData() {\n      // Set loading state to true when submitting the form\n      this.loading = true;\n      const newData = {\n        name: this.name\n      };\n\n      // Implement your create data logic here\n\n      this.clearForm();\n    },\n    // \n    clearForm() {\n      this.name = '';\n      // Reset loading state when the form is cleared\n      this.loading = false;\n    },\n    num_pages() {\n      return Math.ceil(this.types.length / this.elementsPerPage);\n    },\n    change_page(page) {\n      this.currentPage = page;\n    }\n  },\n  mounted() {\n    this.fetchTypes();\n    this.fetchPriorities();\n  }\n};","map":{"version":3,"names":["axios","Swal","data","elementsPerPage","currentPage","perPage","pageOptions","active","editName","name","loading","item","status","types","priorities","type","priority","desc","computed","columns","isFormValid","methods","fetchTypes","response","get","headers","localStorage","getItem","console","error","message","fetchPriorities","createData","newData","clearForm","num_pages","Math","ceil","length","change_page","page","mounted"],"sources":["C:\\Users\\chukwuebuka.ohaji\\Workspace\\Tests\\HomeCareAgency\\web\\src\\pages\\dashboard\\client.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <Breadcrumbs main=\"Client Dashboard\" title=\"default\" />\r\n\r\n        <div class=\"container-fluid\">\r\n            <div class=\"row widget-grid\">\r\n                <!-- <WelcomeCard /> -->\r\n            </div>\r\n        </div>\r\n        <br>\r\n        <div class=\"card\">\r\n            <div class=\"card-header\">\r\n                <div class=\"dataTables_length\" id=\"basic-1_length\">\r\n                    <label>\r\n                        Show\r\n                        <select name=\"basic-1_length\" aria-controls=\"basic-1\" class=\"\" v-model=\"perPage\">\r\n                            <option v-for=\"option in pageOptions\" :key=\"option\" :value=\"option\">{{ option }}</option>\r\n                        </select> entries\r\n                    </label>\r\n                </div>\r\n                <div class=\"row justify-content-end\">\r\n                    <div class=\"col-auto\">\r\n                        <button class=\"btn btn-primary btn-lg\" type=\"button\" data-bs-toggle=\"modal\"\r\n                            data-original-title=\"test\" data-bs-target=\"#exampleModal\">Report New Incident</button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" role=\"dialog\"\r\n                    aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                    <div class=\"modal-dialog\" role=\"document\">\r\n                        <div class=\"modal-content\">\r\n                            <div class=\"modal-header\">\r\n                                <h5 class=\"modal-title\" id=\"exampleModalLabel\">New Incident</h5>\r\n                                <button class=\"btn-close\" type=\"button\" data-bs-dismiss=\"modal\"\r\n                                    aria-label=\"Close\"></button>\r\n                            </div>\r\n                            <form class=\"needs-validation\" novalidate=\"\" @submit.prevent=\"createData\">\r\n                                <div class=\"modal-body\">\r\n                                    <!-- type of incident -->\r\n                                    <div class=\"form-group mb-1\">\r\n                                        <label class=\"col-form-label\">Type of Incident <span\r\n                                                class=\"text-danger\">*</span>\r\n                                        </label>\r\n                                        <select v-model=\"type\" class=\"form-control\" id=\"typeSelect\" required>\r\n                                            <option v-for=\"type in types\" :value=\"type.id\">\r\n                                                {{ type.name }}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <!-- priority -->\r\n                                    <div class=\"form-group mb-1\">\r\n                                        <label class=\"col-form-label\">Priority / Severity <span\r\n                                                class=\"text-danger\">*</span>\r\n                                        </label>\r\n                                        <select v-model=\"priority\" class=\"form-control\" id=\"prioritySelect\" required>\r\n                                            <option v-for=\"priority in priorities\" :value=\"priority.id\">\r\n                                                {{ priority.name }}\r\n                                            </option>\r\n                                        </select>\r\n                                    </div>\r\n\r\n                                    <!-- desc -->\r\n                                    <div class=\"form-group mb-1\">\r\n                                        <label class=\"col-form-label\">Describe the incident <span\r\n                                                class=\"text-danger\">*</span>\r\n                                        </label>\r\n                                        <textarea class=\"form-control\" v-model=\"desc\" required></textarea>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"modal-footer\">\r\n                                    <button class=\"btn btn-secondary\" type=\"button\"\r\n                                        data-bs-dismiss=\"modal\">Close</button>\r\n                                    <button :disabled=\"!isFormValid || loading\" class=\"btn btn-primary\">\r\n                                        <span v-if=\"loading\">Please Wait...</span>\r\n                                        <span v-else>Save changes</span>\r\n                                    </button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-body\">\r\n                <div class=\"table-responsive\">\r\n                    <table class=\"table table-bordered display\" id=\"basic-1\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Name</th>\r\n                                <!-- <th>Status</th> -->\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr v-for=\"role in roles\" :key=\"role.id\">\r\n                                <td class=\"text-uppercase\">{{ role.name }}</td>\r\n                                <!-- <td v-if=\"role.isActive == true\">Active </td>\r\n                                <td v-else-if=\"role.isActive == false\">Disabled</td> -->\r\n                                <!-- <td>{{ role.isActive }}</td> -->\r\n\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <br>\r\n                <ul class=\"pagination\">\r\n                    <li class=\"page-item\">\r\n                        <a class=\"page-link\" href=\"#\" aria-label=\"Previous\">\r\n                            <span aria-hidden=\"true\">&laquo;</span>\r\n                        </a>\r\n                    </li>\r\n                    <li class=\"page-item\" v-for=\"i in num_pages()\" :key=\"i\"\r\n                        v-bind:class=\"[i == currentPage ? 'active' : '']\" v-on:click=\"change_page(i)\">\r\n                        <a class=\"page-link\">{{ i }}</a>\r\n                    </li>\r\n                    <li class=\"page-item\">\r\n                        <a class=\"page-link\" href=\"#\" aria-label=\"Next\">\r\n                            <span aria-hidden=\"true\">&raquo;</span>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            elementsPerPage: 10,\r\n            currentPage: 1,\r\n            perPage: 10,\r\n            pageOptions: [10, 25, 50, 100],\r\n            active: true,\r\n            editName: '',\r\n            name: '',\r\n            loading: false,\r\n            item: {},\r\n            status: '',\r\n            types: [],\r\n            priorities: [],\r\n            type: '',\r\n            priority: '',\r\n            desc: ''\r\n        };\r\n    },\r\n    computed: {\r\n        columns() {\r\n            return ['Name', 'Status', 'Date Created'];\r\n        },\r\n        isFormValid() {\r\n            return this.type;\r\n        }\r\n    },\r\n    methods: {\r\n        async fetchTypes() {\r\n            try {\r\n                const response = await axios.get('http://127.0.0.1:8000/api/types/list', {\r\n                    headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + localStorage.getItem('HCA_TOKEN') }\r\n                });\r\n                if (response.data.status) {\r\n                    this.types = response.data.data;\r\n                } else {\r\n                    console.error('Error fetching types:', response.data.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching types:', error);\r\n            }\r\n        },\r\n        // \r\n        async fetchPriorities() {\r\n            try {\r\n                const response = await axios.get('http://127.0.0.1:8000/api/priorities/list', {\r\n                    headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + localStorage.getItem('HCA_TOKEN') }\r\n                });\r\n                if (response.data.status) {\r\n                    this.priorities = response.data.data;\r\n                } else {\r\n                    console.error('Error fetching priorities:', response.data.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching priorities:', error);\r\n            }\r\n        },\r\n\r\n        // \r\n        async createData() {\r\n            // Set loading state to true when submitting the form\r\n            this.loading = true;\r\n            const newData = {\r\n                name: this.name,\r\n            };\r\n\r\n            // Implement your create data logic here\r\n\r\n            this.clearForm();\r\n        },\r\n        // \r\n        clearForm() {\r\n            this.name = '';\r\n            // Reset loading state when the form is cleared\r\n            this.loading = false;\r\n        },\r\n        num_pages() {\r\n            return Math.ceil(this.types.length / this.elementsPerPage);\r\n        },\r\n        change_page(page) {\r\n            this.currentPage = page;\r\n        },\r\n    },\r\n    mounted() {\r\n        this.fetchTypes();\r\n        this.fetchPriorities();\r\n    }\r\n};\r\n</script>\r\n\r\n<!-- <script>\r\nimport WelcomeCard from \"./WelcomeCard.vue\";\r\n\r\nexport default {\r\n\r\n    data() {\r\n        return {\r\n            elementsPerPage: 10,\r\n            currentPage: 1,\r\n            perPage: 10,\r\n            pageOptions: [10, 25, 50, 100],\r\n            active: true,\r\n            editName: '',\r\n            name: '',\r\n            loading: false,\r\n            item: {},\r\n            status: '',\r\n            types: [],\r\n            type: '',\r\n            // roles: [],\r\n        };\r\n    },\r\n    computed: {\r\n        columns() {\r\n            return ['Name', 'Status', 'Date Created'];\r\n        },\r\n        isFormValid() {\r\n            return (\r\n                this.name\r\n            );\r\n        }\r\n    },\r\n    components: {\r\n        WelcomeCard,\r\n    },\r\n    methods: {\r\n        setItem(item) {\r\n            this.item = item\r\n            this.editName = item.name,\r\n                this.id = item.id\r\n            // console.log(this.item)\r\n        },\r\n\r\n        // \r\n        async fetchTypes() {\r\n            try {\r\n                const response = await axios.get('http://127.0.0.1:8000/api/types/list');\r\n                if (response.data.status) {\r\n                    this.types = response.data.data;\r\n                } else {\r\n                    console.error('Error fetching data:', response.data.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        },\r\n\r\n        async fetchIncidents() {\r\n            try {\r\n                const response = await axios.get('http://127.0.0.1:8000/api/types/list', {\r\n                    headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + localStorage.getItem('HCA_TOKEN') }\r\n                });\r\n                if (response.data.status) {\r\n                    this.types = response.data.data;\r\n                } else {\r\n                    console.error('Error fetching types:', response.data.message);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching types:', error);\r\n            }\r\n        },\r\n        // create\r\n        async createData() {\r\n            // Set loading state to true when submitting the form\r\n            this.loading = true;\r\n            const newData = {\r\n                name: this.name,\r\n            };\r\n\r\n            axios.post('http://127.0.0.1:8000/api/admin/role/create', newData, {\r\n                headers: { 'Content-Type': 'application/json', 'Authorization': 'Bearer ' + localStorage.getItem('HCA_TOKEN') }\r\n            })\r\n                .then(response => {\r\n                    console.log('success')\r\n                    console.log(response)\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        toast: true,\r\n                        position: 'top-end',\r\n                        showConfirmButton: false,\r\n                        timer: 3000,\r\n                        title: response.data.message,\r\n                    });\r\n                    this.clearForm();\r\n                    // Redirect to login page after successful registration\r\n                    // const router = useRouter();\r\n                    window.location.href = 'http://localhost:8080/admin/roles'\r\n                    // router.push('/'); // Assuming '/' is the path for the login page\r\n\r\n                })\r\n                .catch(error => {\r\n\r\n                    console.log('success')\r\n                    console.log(error)\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: error.response ? error.response.data.message : 'Failed',\r\n                        // text: error.response.data.data\r\n                        text: error.response ? error.response.data.data : 'An error occurred'\r\n                    });\r\n                })\r\n                .finally(() => {\r\n                    // Reset loading state regardless of success or failure\r\n                    this.loading = false;\r\n                });\r\n        },\r\n\r\n        clearForm() {\r\n            this.name = '';\r\n            // Reset loading state when the form is cleared\r\n            this.loading = false;\r\n        },\r\n        num_pages() {\r\n            return Math.ceil(this.types.length / this.elementsPerPage);\r\n        },\r\n        change_page(page) {\r\n            this.currentPage = page;\r\n        },\r\n    },\r\n    mounted() {\r\n        this.fetchIncidents();\r\n    }\r\n};\r\n</script> -->\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}